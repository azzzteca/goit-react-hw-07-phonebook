{"version":3,"sources":["components/App/App.module.css","redux/contacts-actions.js","redux/contacts-reduser.js","redux/contacts-store.js","components/Section/Section.jsx","redux/contacts-selectors.js","components/InputForm/InputForm.jsx","redux/contacts-operations.js","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/App/App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSucccess","fetchContactsError","addContactsRequest","addContactsSuccess","payload","name","number","addContactsError","deleteContactsRequest","deleteContacstSuccess","deleteContacstError","filterContacts","itemsReducer","createReducer","contactsActions","_","state","filter","contact","id","filterReducer","toLowerCase","contactsReducer","combineReducers","items","store","configureStore","reducer","contacts","devTools","process","Section","title","children","className","getContacts","getFilter","InputForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","inputChange","evt","target","value","onSubmit","preventDefault","newContact","savedContacts","find","alert","fetch","method","body","JSON","stringify","headers","then","response","Error","status","json","data","catch","error","reset","onChange","type","pattern","required","Filter","ContactListItem","onClick","ContactList","useEffect","includes","map","App","s","app","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c279dc1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3hCCM\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\n\nexport const fetchContactsSucccess = createAction(\n  'contacts/fetchContactsSucccess',\n);\n\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactsRequest = createAction('contacts/addContactRequest');\nexport const addContactsSuccess = createAction(\n  'contacts/addContactSuccess',\n  ({ name, number }) => ({\n    payload: {\n      name,\n      number,\n    },\n  }),\n);\nexport const addContactsError = createAction('contacts/addContactError');\n\nexport const deleteContactsRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContacstSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContacstError = createAction('contacts/deleteContactError');\n\nexport const filterContacts = createAction('contacts/filter');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as contactsActions from './contacts-actions';\n\nconst itemsReducer = createReducer([], {\n  [contactsActions.fetchContactsSucccess]: (_, { payload }) => {\n    return payload;\n  },\n  [contactsActions.addContactsSuccess]: (state, { payload }) => [\n    ...state,\n    payload,\n  ],\n\n  [contactsActions.deleteContacstSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [contactsActions.filterContacts]: (_, { payload }) => payload.toLowerCase(),\n});\n\nexport const contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { contactsReducer } from './contacts-reduser';\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n\n  devTools: process.env.NODE_ENV === 'development',\n});\n","import PropTypes from 'prop-types';\r\n\r\nexport function Section({ title, children }) {\r\n  return (\r\n    <div className=\"section\">\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as contactsOperations from '../../redux/contacts-operations';\r\nimport { getContacts } from '../../redux/contacts-selectors';\r\nimport s from './InputForm.module.css';\r\n\r\nexport function InputForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const inputChange = evt => {\r\n    const { name, value } = evt.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    const newContact = name.toLowerCase();\r\n    const savedContacts = contacts.find(\r\n      contact => contact.name.toLowerCase() === newContact,\r\n    );\r\n\r\n    if (savedContacts) {\r\n      alert(name + 'is already in contacts.');\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsOperations.addContacts({ name, number }));\r\n\r\n    evt.target.reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          onChange={inputChange}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label>\r\n        Number\r\n        <input\r\n          onChange={inputChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n","import * as contactsActions from './contacts-actions';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  fetch('http://localhost:4000/contacts')\r\n    .then(response => {\r\n      if (!response) {\r\n        throw new Error(response.status);\r\n      }\r\n\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      dispatch(contactsActions.fetchContactsSucccess(data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\n\r\nexport const addContacts = contact => dispatch => {\r\n  dispatch(contactsActions.addContactsRequest());\r\n\r\n  fetch('http://localhost:4000/contacts', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ name: contact.name, number: contact.number }),\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=UTF-8',\r\n    },\r\n  })\r\n    .then(response => {\r\n      if (!response) {\r\n        throw new Error(response.status);\r\n      }\r\n\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      dispatch(contactsActions.addContactsSuccess(data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.addContactsError(error)));\r\n};\r\n\r\nexport const deleteContacts = id => dispatch => {\r\n  dispatch(contactsActions.deleteContactsRequest());\r\n\r\n  fetch(`http://localhost:4000/contacts/${id}`, { method: 'DELETE' })\r\n    .then(() => {\r\n      dispatch(contactsActions.deleteContacstSuccess(id));\r\n    })\r\n    .catch(error => dispatch(contactsActions.deleteContacstError(error)));\r\n};\r\n","import { useDispatch } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nexport function Filter() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        onChange={evt =>\r\n          dispatch(contactsActions.filterContacts(evt.target.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import { useDispatch } from 'react-redux';\r\nimport * as contactsOperations from '../../redux/contacts-operations';\r\n\r\nexport function ContactListItem({ contact }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      {contact.name} {contact.number}\r\n      <button\r\n        type=\"button\"\r\n        id={contact.id}\r\n        onClick={evt =>\r\n          dispatch(contactsOperations.deleteContacts(evt.target.id))\r\n        }\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\r\nimport { getContacts, getFilter } from '../../redux/contacts-selectors';\r\nimport * as contactsOperations from '../../redux/contacts-operations';\r\n\r\nexport function ContactList({ children }) {\r\n  const contacts = useSelector(getContacts);\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Contacts</h2>\r\n      {children}\r\n      <ul>\r\n        {!filter\r\n          ? contacts.map(contact => (\r\n              <li key={contact.id}>\r\n                <ContactListItem contact={contact} />\r\n              </li>\r\n            ))\r\n          : contacts\r\n              .filter(contact => contact.name.toLowerCase().includes(filter))\r\n              .map(contact => (\r\n                <li key={contact.id}>\r\n                  <ContactListItem contact={contact} />\r\n                </li>\r\n              ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  filter: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import { useSelector } from 'react-redux';\nimport { Section } from '../Section/Section.jsx';\nimport { InputForm } from '../InputForm/InputForm.jsx';\nimport { Filter } from '../Filter/Filter.jsx';\nimport { ContactList } from '../ContactList/ContactList.jsx';\nimport { getContacts } from '../../redux/contacts-selectors';\nimport s from './App.module.css';\n\nexport function App() {\n  const contacts = useSelector(getContacts);\n\n  return (\n    <div className={s.app}>\n      <Section title={'Phonebook'}>\n        <InputForm />\n\n        <ContactList>{contacts.length > 2 && <Filter />}</ContactList>\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/contacts-store';\nimport './index.css';\nimport { App } from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}